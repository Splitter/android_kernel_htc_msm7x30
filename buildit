#!/bin/bash

echo "*********************************************"
echo "*****   AUTO BUILD & PACKAGE SCRIPT     *****"
echo "*********************************************"

#OPTIONS : 
#	clean	 	- run make clean, remove stderr/stdout txt files and zips/files built by script, do not build kernel/zip
#	debug		- clean up, build kernel normally except redirect stderr/stdout to txt files, do not build flashable zip
#	noclean		- build kernel normally except do not run 'make clean' or do any clean up first
#	nocleandebug	- same as debug except do not run 'make clean' or do any clean up first
#	zipit		- just build flashable zip of already compiled files
#	(none)		- clean up, build kernel then produce flashable zip of kernel



#GLOBAL OPTIONS - edit per build requirements
ARCH=arm
TOOLCHAIN=~/android/Kernel/toolchains/bin/arm-eabi-
BASE_DIR="$( cd "$( dirname "$0" )" && pwd )"
DEFCONFIG=speedy_defconfig
DEFCONFIG_DIR=./arch/arm/configs/
NUMJOBS=6
OPTIONS=-o2
ZIPFILES=zip_template
ZIPPREFIX="JB-Speedy"
DEBUGTXT_CONFIG=config_debug.txt
DEBUGTXT_BUILD=build_debug.txt

#Pull local version from defconfig and append to zip file name
while read line; do #loop through config
  if [[ $line == *"CONFIG_LOCALVERSION="* ]]  #check if line defines local version
  	then  	#copy local version out
  		VERSION=(${line//=/ })
  		VERSION=${VERSION[1]}
  		VERSION=${VERSION:1:(${#VERSION}-2)} 
  fi  
done < $DEFCONFIG_DIR$DEFCONFIG
ZIPNAME=$ZIPPREFIX$VERSION".zip" #create final zip file name

#function to perform clean up operations
function cleanIt {
	echo -e "\nACTION: make clean -j$NUMJOBS"
	make clean -j$NUMJOBS ARCH=$ARCH CROSS_COMPILE=$TOOLCHAIN	
	echo -e "\nACTION: remove zip if present..."
	[ -f $ZIPNAME ] && rm $ZIPNAME	
	echo -e "\nACTION: remove txt files if present..."
	[ -f $DEBUGTXT_CONFIG ] && rm $DEBUGTXT_CONFIG
	[ -f $DEBUGTXT_BUILD ] && rm $DEBUGTXT_BUILD
}

#function to perform build operations
function buildIt {	
	#if 'debug' or 'nocleandebug' then redirect stderr/stdout
	if ( [[ $1 -eq 0 && $1 == nocleandebug ]] || [[ $1 -eq 0 && $1 == debug ]] );
		then
			echo -e "\nACTION: make $DEFCONFIG"
			make $DEFCONFIG &> $DEBUGTXT_CONFIG
			echo -e "\nACTION:make -j$NUMJOBS $OPTIONS ARCH=$ARCH CROSS_COMPILE=$TOOLCHAIN \n"
			make -j$NUMJOBS $OPTIONS ARCH=$ARCH CROSS_COMPILE=$TOOLCHAIN &> $DEBUGTXT_BUILD 
	#othewise just perform normal build
		else		
			echo -e "\nACTION: make $DEFCONFIG"
			make $DEFCONFIG 
			echo -e "\nACTION:make -j$NUMJOBS $OPTIONS ARCH=$ARCH CROSS_COMPILE=$TOOLCHAIN \n"
			make -j$NUMJOBS $OPTIONS ARCH=$ARCH CROSS_COMPILE=$TOOLCHAIN 	
	fi			
}

#function to create flashable zip
function zipIt {
	#create neccassary directory structure 
	echo -e "\nACTION: create working directory..."
	rm -fr tmpdir
	mkdir tmpdir
	echo -e "\nACTION: copy package template to working directory..."
	cp -a $ZIPFILES tmpdir/zipf #copy over template into working dir
	mkdir tmpdir/zipf/system
	mkdir tmpdir/zipf/system/lib
	mkdir tmpdir/zipf/system/lib/modules
	
	#copy over kernel and modules
	echo -e "\nACTION: copy kernel image over..."
	cp arch/arm/boot/zImage tmpdir/zipf/kernel
	echo -e "\nACTION: copying all modules over..."
	for j in $(find . -name "*.ko"); do
		cp "${j}" tmpdir/zipf/system/lib/modules/
	done

	#create zip and delete working directory
	echo -e "\nACTION: creating CWM flashable zip..."
	cd tmpdir/zipf
	zip -r $ZIPNAME *
	cp -R $ZIPNAME $BASE_DIR
	cd ../../
	rm -fr tmpdir
	echo -e "\n\nACTION: Zip $ZIPNAME built and placed in root dir..."
}

#Clean up if argument calls for it
if ( [[ $1 -eq 0 && $1 == noclean ]] || [[ $1 -eq 0 && $1 == nocleandebug ]] || [[ $1 -eq 0 && $1 == zipit ]] );
	then 		
		echo -e "\nSkipping cleanup..."
	else
		echo -e "\nBeginning clean up..."
		cleanIt
		echo -e "\nClean up complete..."		
fi

#If argument is 'clean/zipit' then don't perform build, otherwise build
if ( [[ $1 -eq 0 && $1 == clean ]] || [[ $1 -eq 0 && $1 == zipit ]] );
	then
		echo -e "\nSkipping build process..."
	else
		echo -e "\nBeginning build process......"
		buildIt $1
		echo -e "\nBuild finished......"
fi

#Create zip if argument calls for it
if ( [[ $1 -eq 0 && $1 == noclean ]]|| [[ $1 -eq 0 && $1 == zipit ]] || [[ !"$1" ]] );
	then 		
		echo -e "\nBeginning packaging process......"
		if [ -e arch/arm/boot/zImage ];
			then
				zipIt
				echo -e "\nPackaging finished......"	
			else
				echo -e "\nCannot create package, build must have failed!"
		fi
	else
		echo -e "\nSkipping packaging..."	
fi

echo -e "\nBuild Script has completed!"

